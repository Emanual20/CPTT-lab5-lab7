Lno@0       @0 NODE_PROG children:[@1 @7 @11 @15 @19 @24 ]
Lno@5       @1 NODE_STMT children:[@2 @3 @5 ] STMT_DECL 
Lno@5       @2 NODE_TYPE  int 
Lno@5       @3 NODE_ITEM children:[@4 ] ITEM_DECL
Lno@5       @4 NODE_VAR  variable_name: a 
Lno@5       @5 NODE_ITEM children:[@6 ] ITEM_DECL
Lno@5       @6 NODE_VAR  variable_name: s 
Lno@6       @7 NODE_EXPR children:[@8 @10 ] optype: = 
Lno@6       @8 NODE_EXPR children:[@9 ] optype: lval expr 
Lno@6       @9 NODE_VAR  variable_name: a 
Lno@6       @10 NODE_CONST  10 
Lno@7       @11 NODE_EXPR children:[@12 @14 ] optype: = 
Lno@7       @12 NODE_EXPR children:[@13 ] optype: lval expr 
Lno@7       @13 NODE_VAR  variable_name: s 
Lno@7       @14 NODE_CONST  0 
Lno@8       @15 NODE_STMT children:[@16 @17 ] STMT_DECL 
Lno@8       @16 NODE_TYPE  char 
Lno@8       @17 NODE_ITEM children:[@18 ] ITEM_DECL
Lno@8       @18 NODE_VAR  variable_name: ch 
Lno@9       @19 NODE_FUNC children:[@20 @21 ]  func_name: scanf
Lno@9       @20 NODE_CONST  "%d" 
Lno@9       @21 NODE_LIST children:[@22 ] 
Lno@9       @22 NODE_ITEM children:[@23 ] ITEM_SPF
Lno@9       @23 NODE_VAR  variable_name: ch 
Lno@10       @24 NODE_STMT children:[@25 @43 ] STMT: while 
Lno@10       @25 NODE_EXPR children:[@26 @33 ] optype: || 
Lno@10       @26 NODE_EXPR children:[@27 @30 ] optype: && 
Lno@10       @27 NODE_EXPR children:[@28 @29 ] optype: > 
Lno@10       @28 NODE_VAR  variable_name: a 
Lno@10       @29 NODE_CONST  0 
Lno@10       @30 NODE_EXPR children:[@31 @32 ] optype: <= 
Lno@10       @31 NODE_VAR  variable_name: a 
Lno@10       @32 NODE_CONST  10 
Lno@10       @33 NODE_EXPR children:[@34 @39 ] optype: && 
Lno@10       @34 NODE_EXPR children:[@35 @38 ] optype: == 
Lno@10       @35 NODE_EXPR children:[@36 @37 ] optype: % 
Lno@10       @36 NODE_VAR  variable_name: a 
Lno@10       @37 NODE_CONST  100 
Lno@10       @38 NODE_CONST  10 
Lno@10       @39 NODE_EXPR children:[@40 @42 ] optype: == 
Lno@10       @40 NODE_EXPR children:[@41 ] optype: ! 
Lno@10       @41 NODE_VAR  variable_name: a 
Lno@10       @42 NODE_CONST  10 
Lno@10       @43 NODE_STMT children:[@44 @48 @52 @56 @60 ] STMT: block {} 
Lno@11       @44 NODE_EXPR children:[@45 @47 ] optype: -= 
Lno@11       @45 NODE_EXPR children:[@46 ] optype: lval expr 
Lno@11       @46 NODE_VAR  variable_name: a 
Lno@11       @47 NODE_CONST  1 
Lno@12       @48 NODE_STMT children:[@49 @50 ] STMT_DECL 
Lno@12       @49 NODE_TYPE  int 
Lno@12       @50 NODE_ITEM children:[@51 ] ITEM_DECL
Lno@12       @51 NODE_VAR  variable_name: a 
Lno@13       @52 NODE_EXPR children:[@53 @55 ] optype: = 
Lno@13       @53 NODE_EXPR children:[@54 ] optype: lval expr 
Lno@13       @54 NODE_VAR  variable_name: a 
Lno@13       @55 NODE_CONST  10 
Lno@14       @56 NODE_EXPR children:[@57 @59 ] optype: += 
Lno@14       @57 NODE_EXPR children:[@58 ] optype: lval expr 
Lno@14       @58 NODE_VAR  variable_name: s 
Lno@14       @59 NODE_VAR  variable_name: a 
Lno@15       @60 NODE_STMT children:[@61 @66 ] STMT: if 
Lno@15       @61 NODE_EXPR children:[@62 @64 ] optype: < 
Lno@15       @62 NODE_EXPR children:[@63 ] optype: - 
Lno@15       @63 NODE_VAR  variable_name: s 
Lno@15       @64 NODE_EXPR children:[@65 ] optype: - 
Lno@15       @65 NODE_CONST  10 
Lno@15       @66 NODE_STMT children:[@67 @72 @77 ] STMT: block {} 
Lno@16       @67 NODE_FUNC children:[@68 @69 ]  func_name: printf
Lno@16       @68 NODE_CONST  "result is: %d\n" 
Lno@16       @69 NODE_LIST children:[@70 ] 
Lno@16       @70 NODE_ITEM children:[@71 ] ITEM_SPF
Lno@16       @71 NODE_VAR  variable_name: s 
Lno@17       @72 NODE_STMT children:[@73 @74 ] STMT_DECL 
Lno@17       @73 NODE_TYPE  int 
Lno@17       @74 NODE_ITEM children:[@75 @76 ] ITEM_DECL
Lno@17       @75 NODE_VAR  variable_name: b 
Lno@17       @76 NODE_CONST  10 
Lno@18       @77 NODE_STMT children:[@78 @83 @86 @90 ] STMT: for 
Lno@18       @78 NODE_STMT children:[@79 @80 ] STMT_DECL 
Lno@18       @79 NODE_TYPE  int 
Lno@18       @80 NODE_ITEM children:[@81 @82 ] ITEM_DECL
Lno@18       @81 NODE_VAR  variable_name: i 
Lno@18       @82 NODE_CONST  0 
Lno@18       @83 NODE_EXPR children:[@84 @85 ] optype: < 
Lno@18       @84 NODE_VAR  variable_name: i 
Lno@18       @85 NODE_VAR  variable_name: b 
Lno@18       @86 NODE_EXPR children:[@87 @89 ] optype: += 
Lno@18       @87 NODE_EXPR children:[@88 ] optype: lval expr 
Lno@18       @88 NODE_VAR  variable_name: i 
Lno@18       @89 NODE_CONST  1 
Lno@18       @90 NODE_STMT children:[@91 ] STMT: block {} 
Lno@19       @91 NODE_FUNC children:[@92 @93 ]  func_name: printf
Lno@19       @92 NODE_CONST  "%dHave fun: %d\n" 
Lno@19       @93 NODE_LIST children:[@94 @96 ] 
Lno@19       @94 NODE_ITEM children:[@95 ] ITEM_SPF
Lno@19       @95 NODE_VAR  variable_name: i 
Lno@19       @96 NODE_ITEM children:[@97 ] ITEM_SPF
Lno@19       @97 NODE_VAR  variable_name: b 
